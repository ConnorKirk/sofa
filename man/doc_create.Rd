% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/doc_create.r
\name{doc_create}
\alias{doc_create}
\title{Create documents to a database.}
\usage{
doc_create(doc, cushion = "localhost", dbname, docid = NULL, how = "rows",
  as = "list", ...)
}
\arguments{
\item{doc}{Document content, can be character string, a list. The character type can be
XML as well, which is embedded in json. When the document is retrieved via
\code{\link{doc_get}}, the XML is given back and you can parse it as normal.}

\item{cushion}{A cushion name}

\item{dbname}{Database name3}

\item{docid}{Document ID}

\item{how}{(character) One of rows (default) or columns. If rows, each row becomes a
separate document; if columns, each column becomes a separate document.}

\item{as}{(character) One of list (default) or json}

\item{...}{Curl args passed on to \code{\link[httr]{GET}}}
}
\description{
Create documents to a database.
}
\details{
Documents can have attachments just like email. There are two ways to use attachments:
the first one is via a separate REST call (see \code{\link{attach_create}}); the second is
inline within your document, you can do so with this fxn. See
\url{http://wiki.apache.org/couchdb/HTTP_Document_API#Attachments} for help on formatting
json appropriately.

Note that you can create documents from a data.frame with this function, where each row or
column is a seprate document. However, this function does not use the bulk API
\url{https://couchdb.readthedocs.org/en/latest/api/database/bulk-api.html#db-bulk-docs} - see
\code{\link{bulk_create}} and \code{\link{bulk_update}} to create or update documents with
the bulk API - which should be much faster for a large number of documents.
}
\examples{
\dontrun{
db_create(dbname = "sofadb")

# write a document WITH a name (uses PUT)
doc1 <- '{"name": "drink", "beer": "IPA", "score": 5}'
doc_create(doc1, dbname="sofadb", docid="abeer")
doc_create(doc1, dbname="sofadb", docid="morebeer", as='json')
doc_get(dbname = "sofadb", docid = "abeer")

# write a json document WITHOUT a name (uses POST)
doc2 <- '{"name": "food", "icecream": "rocky road"}'
doc_create(doc2, dbname="sofadb")
doc3 <- '{"planet": "mars", "size": "smallish"}'
doc_create(doc3, dbname="sofadb")
## assigns a UUID instead of a user given name
alldocs(dbname = "sofadb")

# write an xml document WITH a name (uses PUT). xml is written as xml in
# couchdb, just wrapped in json, when you get it out it will be as xml
doc4 <- "<top><a/><b/><c><d/><e>bob</e></c></top>"
doc_create(doc4, dbname="sofadb", docid="somexml")
doc_get(dbname = "sofadb", docid = "somexml")

# in iriscouch
doc_create('{"things":"stuff"}', cushion="iriscouch", dbname='helloworld', docid="ggg")
doc_get("iriscouch", dbname='helloworld', docid="ggg")
doc_delete("iriscouch", dbname='helloworld', docid="ggg")

# You can pass in lists that autoconvert to json internally
doc1 <- list(name = "drink", beer = "IPA", score = 9)
doc_create(doc1, dbname="sofadb", docid="goodbeer")

# On arbitrary remote server
doc1 <- list(name = "drink", beer = "IPA")
doc_create(doc1, cushion="oceancouch", dbname="beard", docid="goodbeer")

# Write directly from a data.frame
## Each row or column becomes a separate document
### by rows
db_create(dbname = "test")
doc_create(mtcars, dbname="test", how="rows")
doc_create(mtcars, dbname="test", how="columns")

head(iris)
db_create(dbname = "testiris")
doc_create(iris, dbname = "testiris")
}
}

